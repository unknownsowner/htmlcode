<?xml version="1.0" encoding="UTF-8"?>
<gamePage>
  <content><![CDATA[
<!DOCTYPE html>
<html lang="en-us">
<head>
  <!-- Original scripts and analytics -->
  <script src="" async type="text/javascript"></script>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-F32JC4N3VY&cx=c&_slc=1"></script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <script type="text/javascript" id="analytics" async src="https://cdn.jsdelivr.net/gh/st39/sdk@main/ga.js"></script>
  <script type="text/javascript" async src=""></script>
  <script id="gamemonetize-sdk" src="https://cdn.jsdelivr.net/gh/st39/sdk@main/sdkjs.js"></script>
  <script src="//www.google.com/jsapi"></script>
  <script>window.parent.maeExportApis_();</script>

  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

  <!-- ✅ Custom Loading Screen Styles -->
  <link rel="shortcut icon" href="https://cdn.jsdelivr.net/gh/unknownsowner/imagebackground/UnknownsFavicon.png" />
  <style>
    #custom-loading-screen {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: url('https://cdn.jsdelivr.net/gh/unknownsowner/imagebackground@main/Untitled%20design.png') no-repeat center center;
      background-size: cover;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 99999;
    }
    #custom-loading-screen img {
      width: 150px;
      height: 150px;
      margin-bottom: 20px;
    }
    #custom-loading-bar {
      width: 300px;
      height: 20px;
      background-color: #333;
      border-radius: 10px;
      overflow: hidden;
    }
    #custom-loading-progress {
      height: 100%;
      width: 0%;
      background-color: #00ffcc;
      transition: width 7s linear;
    }
  </style>
  <script>
    function startCustomLoading() {
      document.getElementById("custom-loading-progress").style.width = "100%";
      setTimeout(function() {
        document.getElementById("custom-loading-screen").style.display = "none";
      }, 7000);
    }
  </script>

  <!-- Original styles and meta tags continue -->
  <style>html{box-sizing:border-box}*,*:before,*:after{box-sizing:inherit}html,body{height:100%}canvas{display:block}body{margin:0}#unity-container{width:100%;height:100%;position:relative}#unity-canvas{width:100%;height:100%;background:#231F20}#loading-cover{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center}#unity-loading-bar{flex:1 1 auto;display:flex;flex-direction:column;justify-content:center;align-items:center}#unity-logo{text-align:center}#unity-logo img{max-width:80%;max-height:80%}#unity-progress-bar-empty{width:40%;height:24px;margin:10px 20px 20px 10px;text-align:left;border:1px solid white;padding:2px}#unity-progress-bar-full{width:0;height:100%;background:white}.light #unity-progress-bar-empty{border-color:black}.light #unity-progress-bar-full{background:black}.spinner,.spinner:after{border-radius:50%;width:5em;height:5em}.spinner{margin:10px;font-size:10px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,0.2);border-right:1.1em solid rgba(255,255,255,0.2);border-bottom:1.1em solid rgba(255,255,255,0.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:spinner-spin 1.1s infinite linear}@keyframes spinner-spin{0%{transform:rotate(0deg)} 100%{transform:rotate(360deg)}}</style>
  <style>body{overflow:hidden;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}</style>
  <style type="text/css">#button {display:none;} .imgb_vis {animation: imgb-animation 7s linear;} @keyframes imgb-animation {10% {transform: translateX(0);} 20% {transform: translateX(100px);} 90% {transform: translateX(100px);} 100% {transform: translateX(0);}}</style>
</head>

<body class="dark" onload="startCustomLoading();">
  <!-- ✅ Custom Loading Screen -->
  <div id="custom-loading-screen">
    <img src="https://cdn.jsdelivr.net/gh/unknownsowner/imagebackground/UnknownsFavicon.png" alt="Loading Icon" />
    <div id="custom-loading-bar">
      <div id="custom-loading-progress"></div>
    </div>
  </div>

  <!-- Your original body content continues below -->
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" width="356" height="838" style="cursor: default;"></canvas>
  </div>
  <div id="loading-cover" style="display: none;">
    <div id="unity-loading-bar">
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full" style="width: 100%;"></div>
      </div>
      <div class="spinner" style="display: none;"></div>
    </div>
  </div>

<!DOCTYPE html> <html lang="en-us"> <head> <meta charset="utf-8"/> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/awaiblecomponent/yooooo@main/style.css"/> <style> /* Убираем выделение по нажатию клавиш */ canvas:focus { outline: none; } html, body { /* Убираем отступы */ padding: 0; margin: 0; /* Отключаем скролл и лонгтап на IOS */ overflow: hidden; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); /* Ставим высоту на 100% */ height: 100%; } </style> <style> #noticeLoad { position: fixed; left: 0; width: 100%; height: 100%; display: none; justify-content: center; align-items: center; color: rgba(255, 255, 255, 1); font-size: 2vw; z-index: 9999; text-align: center; font-family: ARIAL BLACK, sans-serif; } @media screen and (max-width: 800px) { #noticeLoad { top: 40%; } } @media screen and (min-width: 801px) { #noticeLoad { top: 20%; } } </style> </head> <body class="dark"> <div id="unity-container" class="unity-desktop"> <canvas id="unity-canvas" tabindex="-1"></canvas> </div> <div id="loading-cover" style="display:none;"> <div id="unity-loading-bar"> <div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/awaiblecomponent/yooooo@main/logo.png"/></div> <div id="unity-progress-bar-empty" style="display: none;"> <div id="unity-progress-bar-full"></div> </div> <div class="spinner"></div> </div> </div> <!-- Additional body modules --> <div id="noticeLoad"></div> <script> const hideFullScreenButton = ""; const buildUrl = "https://cdn.jsdelivr.net/gh/awaiblecomponent/yooooo@main/Build"; const loaderUrl = buildUrl + "/BU2.loader.js"; const config = { dataUrl: buildUrl + "/BU2.data.br", // Orijinal URL, birleştirme sonrası kullanılacak frameworkUrl: buildUrl + "/BU2.framework.js", codeUrl: buildUrl + "/BU2.wasm.br", // Orijinal URL, birleştirme sonrası kullanılacak streamingAssetsUrl: "StreamingAssets", companyName: "DefaultCompany", productName: "Escape Tamplate", productVersion: "0.1" }; const container = document.querySelector("#unity-container"); const canvas = document.querySelector("#unity-canvas"); const loadingCover = document.querySelector("#loading-cover"); const progressBarEmpty = document.querySelector("#unity-progress-bar-empty"); const progressBarFull = document.querySelector("#unity-progress-bar-full"); const spinner = document.querySelector('.spinner'); const canFullscreen = (function () { for (const key of [ 'exitFullscreen', 'webkitExitFullscreen', 'webkitCancelFullScreen', 'mozCancelFullScreen', 'msExitFullscreen', ]) { if (key in document) { return true; } } return false; }()); if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) { container.className = "unity-mobile"; } loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/awaiblecomponent/yooooo@main/background.jpg') center / cover"; loadingCover.style.display = ""; document.addEventListener('contextmenu', event => event.preventDefault()); function FocusGame() { window.focus(); canvas.focus(); } window.addEventListener('pointerdown', FocusGame); window.addEventListener('touchstart', FocusGame); let StartUnityInstance; let myGameInstance; let ysdk = null; let environmentData = { language: "en", domain: "default_domain", deviceType: "desktop", isMobile: false, isDesktop: true, isTablet: false, isTV: false, appID: "default_app_id", browserLang: navigator.language || "en", payload: null, promptCanShow: false, reviewCanShow: false, platform: navigator.platform, browser: (function() { let userAgent = navigator.userAgent; if (userAgent.includes("YaBrowser")) return "Yandex"; if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera"; if (userAgent.includes("Firefox")) return "Firefox"; if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE"; if (userAgent.includes("Edge")) return "Edge"; if (userAgent.includes("Chrome")) return "Chrome"; if (userAgent.includes("Safari")) return "Safari"; return "Other"; })() }; let cloudSaves = 'noData'; let paymentsData = 'none'; let playerData = 'noData'; let player = null; let payments = null; let initGame = false; let nowFullAdOpen = false; function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); } function SaveCloud() { console.warn("SaveCloud is not implemented"); } function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); } function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); } function FullAdShow() { try { if (!nowFullAdOpen) { nowFullAdOpen = true; if (initGame) { myGameInstance.SendMessage("YandexGame", "OpenFullAd"); } setTimeout(() => { nowFullAdOpen = false; if (initGame) { myGameInstance.SendMessage("YandexGame", "CloseFullAd", "true"); } FocusGame(); }, 500); } } catch (error) {} } function RewardedShow(rewardId) { try { myGameInstance.SendMessage("YandexGame", "RewardVideo", rewardId); function closeRewardedAd() { myGameInstance.SendMessage("YandexGame", "CloseRewardVideo"); FocusGame(); } closeRewardedAd(); } catch (error) {} } function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); } function Review() { console.warn("Review is not implemented"); } function PromptShow() { console.warn("PromptShow is not implemented"); } function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); } function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); } function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); } function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); } function HideNoticeLoad() { console.warn("ConsumePurchases is not implemented"); } // Parçalı dosyaları birleştirme fonksiyonu async function mergeFileParts(fileName, partCount) { const blobParts = []; let loadedBytes = 0; const totalParts = partCount; for (let i = 1; i <= totalParts; i++) { const partFileName = `${buildUrl}/${fileName}.part${i.toString().padStart(3, '0')}`; try { const response = await fetch(partFileName); if (!response.ok) throw new Error(`Parça ${partFileName} yüklenemedi`); const partBlob = await response.blob(); blobParts.push(partBlob); loadedBytes += partBlob.size; // Yükleme barı güncelleme const progress = loadedBytes / (totalParts * 10 * 1024 * 1024); // Tahmini toplam boyut üzerinden progressBarEmpty.style.display = ""; spinner.style.display = "none"; progressBarFull.style.width = `${Math.min(100 * progress, 100)}%`; } catch (error) { console.error(`Parça yükleme hatası (${partFileName}):`, error); throw error; } } // Parçaları birleştir const mergedBlob = new Blob(blobParts, { type: 'application/octet-stream' }); return URL.createObjectURL(mergedBlob); } // Unity yükleme işlemi try { const script = document.createElement("script"); script.src = loaderUrl; script.onload = async () => { try { // Parçalı dosyaları birleştir const dataUrlPromise = mergeFileParts("BU2.data.br", 5); // 5 parça const codeUrlPromise = mergeFileParts("BU2.wasm.br", 3); // 3 parça // Birleştirilmiş URL'leri al config.dataUrl = await dataUrlPromise; config.codeUrl = await codeUrlPromise; StartUnityInstance = function () { createUnityInstance(canvas, config, (progress) => { // Yükleme barı animasyonu (birleştirme sonrası Unity yüklemesi) spinner.style.display = "none"; progressBarEmpty.style.display = ""; progressBarFull.style.width = `${100 * progress}%`; }).then((unityInstance) => { myGameInstance = unityInstance; loadingCover.style.display = "none"; }).catch((message) => { console.error("Unity yükleme hatası:", message); }); }; StartUnityInstance(); } catch (error) { console.error("Dosya birleştirme hatası:", error); } }; document.body.appendChild(script); } catch (error) { console.error("Başlatma sırasında hata:", error); } function InitGame() { try { console.log('Init Game Success'); initGame = true; if (nowFullAdOpen && myGameInstance) { myGameInstance.SendMessage('YandexGame', 'OpenFullAd'); } } catch (error) { console.error("InitGame sırasında hata:", error); } } window.addEventListener("unhandledrejection", function(event) { console.warn("Hata es geçildi:", event.reason); event.preventDefault(); }); </script> </body> </html>
</body>
</html>
  ]]></content>
</gamePage>
